import pytest
from my_list import *


def test_get_my():
    """Проверка геттера класса My.
    Ожидается получить значение объекта класса My.
    Юнит тест, так как тестируется изолированно одна функция.
    """
    my_list = My('1 2 3')
    assert my_list.get_my() == '1 2 3'


def test_set_my():
    """Проверка сеттера класса My.
    Ожидается изменение объекта класса My
    Юнит тест, так как тестируется изолированно одна функция."""
    user_value = '7 5 9'
    my_list = My('1 2 3')
    my_list.set_my(user_value)
    assert my_list.get_my() == user_value


def test_get_message__user_list():
    """Проверка обработки исключения при вводе пустой строки.
    Ожидается получение сообщения о пустой строке(списке).
    Юнит тест, так как тестируется изолированно одна функция."""
    my_list = My('')
    assert Examination._user_list(my_list) == '!!!Обнаружено: пустой/(-ые) список/(-ки)!!!'


def test_get_exception__user_list():
    """Проверка обработки исключения при вводе недопустимого значения.
    Ожидается получение сообщения о вводе недопустимого значения.
     Юнит тест, так как тестируется изолированно одна функция."""
    my_list = My('1 2 B')
    assert Examination._user_list(my_list) == '!!!Обнаружено: недопустимые символ/(-ы) в списке!!!'


@pytest.mark.parametrize('value, result',
                         [('1 2 3 4', [1, 2, 3, 4]),
                          ('5.2 6', [5.2, 6]),
                          ('-1 5.3 0', [-1, 5.3, 0]),
                          ('0 0 0 0', [0, 0, 0, 0])])
def test_get__user_list(value, result):
    """Проверка преобразования строки в список из чисел.
    Ожидается получение списка из чисел
    Юнит тест, так как тестируется изолированно одна функция."""
    my_list = My(value)
    assert Examination._user_list(my_list) == result


@pytest.mark.parametrize('value, result',
                         [('1 2 3 4', 2.5),
                          ('5.2 6', 5.6),
                          ('-1 5.3 0', 1.43),
                          ('0 0 0 0', 0)])
def test_get_average_value(value, result):
    """Проверка расчета среднего значения списка, при вводе валидных
    значений. Ожидается получение рассчитанного среднего значения.
    Интеграционный тест, так как тестируются не только функция _average_number(),
    но и её взаимосвязь с функцией _user_list()."""
    my_list = My(value)
    assert round(Average._average_number(my_list), 2) == result


@pytest.mark.parametrize('value, result',
                         [('1 a 4 5', '!!!Обнаружено: недопустимые символ/(-ы) в списке!!!'),
                          ('5,2 6', '!!!Обнаружено: недопустимые символ/(-ы) в списке!!!'),
                          ('-1 5.3 -', '!!!Обнаружено: недопустимые символ/(-ы) в списке!!!'),
                          ('', '!!!Обнаружено: пустой/(-ые) список/(-ки)!!!')])
def test_get_exception__average_number(value, result):
    """Проверка расчета среднего значения списка, при вводе невалидных
    значений. Ожидается получение сообщения о недопустимых значениях.
    Интеграционный тест, так как тестируются не только функция _average_number(),
    но и её взаимосвязь с функцией _user_list()."""
    my_list = My(value)
    assert Average._average_number(my_list) == result


@pytest.mark.parametrize('first_value, second_value, result',
                         [('1 a 4 5', '1 5 6', '!!!Обнаружено: недопустимые символ/(-ы) в списке!!!'),
                          ('4 5 7', '', '!!!Обнаружено: пустой/(-ые) список/(-ки)!!!')])
def test_get_comparison_result_no_valid_data(first_value, second_value, result):
    """Проверка сравнения средних значений у двух списков, при
    вводе невалидных значений. Ожидается получение сообщения о недопустимых значениях.
    Сквозной тест, так как тестируется все функции от начала до конца."""
    assert Average.get_comparison_result(first_value, second_value) == result


@pytest.mark.parametrize('first_value, second_value, result',
                         [('1 2 3 4', '9 8', 'Второй список имеет большее среднее значение: 2.50 < 8.50'),
                          ('-2 3 3.5 2.5', '0 0 0 0 0', 'Первый список имеет большее среднее значение: 1.75 > 0.00'),
                          ('100 -20 -80', '20 -40 20', 'Средние значения равны: 0.00 = 0.00')])
def test_get_comparison_result_valid_data(first_value, second_value, result):
    """Проверка сравнения средних значений у двух списков, при
    вводе валидных значений. Ожидается получение сообщения о том,
    что какой-то из списков больше другого или они равны.
    Сквозной тест, так как тестируется все функции от начала до конца."""
    assert Average.get_comparison_result(first_value, second_value) == result
